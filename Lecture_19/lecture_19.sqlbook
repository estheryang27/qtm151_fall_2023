-- SQLBook: Markup
# <span style="color:darkblue"> Lecture 19 - Practicing SQL queries </span>

<font size = "5">

In  this lecture we will practice SQL commands (often) <br>
called "SQL queries"

- There will be a quiz on this lecture
-- SQLBook: Markup
# <span style="color:darkblue"> I. Review of SQL commands </span>

-- SQLBook: Markup
<font size = "5">

Basic Syntax
-- SQLBook: Code
-- Commands separated by a semicolon ";"
-- Commands in upper case, inputs lower case
-- Include comments with two dashes "--"
-- Arguments in parenthesis, separated by a comma ","
-- For strings, use single quotations '...', not double "...".
-- SQLBook: Markup
<font size = "5">

Data extraction
-- SQLBook: Code
-- All of the data extraction start with a SELECT ... FROM
-- which has the following form
-- The "*" is used to denote all the columns 

--             SELECT * FROM datasetname
--             SELECT colname1, colname2 FROM datasetname
-- SQLBook: Markup
<font size = "5">

Data manipulation

```GROUP BY``` $\qquad \qquad \qquad  $: Grouped operations <br>
```ORDER BY .... ASC```  $\qquad $: Sort dataset in ascending order <br>
```ORDER BY .... DSC```  $\qquad $: Sort dataset in descending order <br>
```WHERE ```  $\qquad \qquad \qquad \quad \ $: Subsetting rows based on original columns<br>
```HAVING ``` $\qquad \qquad \qquad \ \ \ $: Subsetting rows based on aggregate statistics <br>
```LEFT JOIN ... ON ...``` $ \ \ \ $: Replacing values
-- SQLBook: Markup
<font size = "5">

Import data
-- SQLBook: Code
-- Need to run all three of the following operations:

-- (i) Delete table:
--      DROP IF EXISTS table_name```

-- (ii) Create headers of new table:
--      CREATE TABLE table_name ( ... ) ```

-- (iii) Import rows from CSV:
--      Use create_engine from sqlalchemy and to_sql from pandas to import csv files

-- SQLBook: Markup
## <span style="color:darkblue"> III. Quiz Structure </span>

Name = "Esther Yang"

ID = 2487073

print(Name)

print(ID)

print("I will abide by Emory's code of conduct")



import pandas as pd

from sqlalchemy import create_engine

from   sqlalchemy.engine import URL

from   sqlalchemy import text

import numpy as np

import matplotlib.pyplot as plt
-- SQLBook: Markup

<font size = "5">

(a) Create empty table 

- We will provide an image of the codebook <br>
with column names and data types
- You will need to use the SQL command ``` CREATE TABLE ```
- Manually input rows

-- SQLBook: Code
CREATE TABLE drivers(
    driver_id int,
    driver_name varchar(30),
    nationality varchar(15),
    victories int
);

INSERT INTO drivers VALUES (1, 'Lewis Hamilton', 'British', 103);
INSERT INTO drivers VALUES (4, 'Fernando Alonso', 'Spanish', 32);
INSERT INTO drivers VALUES (3, 'Sebastian Vettel', 'German', 91);
INSERT INTO drivers VALUES (2, 'Michael Schumacher', 'German', 53);
-- SQLBook: Markup

<font size = "5">

(b) Import rows

- Be able to find a paste the path of a file on your computer
- For table created in part (a) import the data <br>
from ".csv" files using ```pandas``` and ```sqlalchemy``` <br>

- Display the dataset using ``` SELECT * FROM .... ```
- See Lecture 17 for more details

-- SQLBook: Markup
import pandas as pd

from sqlalchemy import create_engine

Path to the CSV file on MacOS might look like this:

csv_file_path = '/Users/yourusername/path/to/yourfile.csv'

Use pandas to read the CSV file

data = pd.read_csv(csv_file_path)

SQLAlchemy connectable

engine = create_engine('postgresql://username:password@localhost:5432/yourdatabase')

engine = create_engine('postgresql://postgres:12345@localhost:5432/formula1')

Import data into the 'drivers' table using pandas 'to_sql' method
data.to_sql('drivers', con=engine, if_exists='append', index=False)

drivers_data.to_sql('drivers', engine, if_exists='replace', index=False)

Verify the imported data

with engine.connect() as connection:
    result = connection.execute("SELECT * FROM drivers;")
    for row in result:
        print(row)

-- SQLBook: Markup
<font size = "5">

(c) Subset and sort

- Subset one of the above datasets using ``` WHERE ```
- Then sort the datasets in ascending or descending order 
-- SQLBook: Code

SELECT * FROM drivers
WHERE nationality = 'German';
-- Order in ascending order of victories
-- Remember that * means that all columns are selected
SELECT driver_name FROM drivers
ORDER BY victories ASC;
-- Order in descending order of victories
SELECT * FROM drivers
ORDER BY victories DESC;
-- SQLBook: Markup
<font size = "5">

(d) Groupby + Aggregate

- Subset one of the above datasets using ``` GROUP BY ```
- Name the aggregate statistic using ```AS```
- Be prepared to use ```COUNT(*)```, ```COUNT(DISTINCT ...)``` <br>
```AVG(...)```, ```SUM(...)```, ```MIN(...)```, ```MAX(...)```


HINT: See the end of lecture 16
-- SQLBook: Code
-- Grouping drivers by nationality and calculating various aggregate statistics:
SELECT nationality,
       COUNT(*) AS num_drivers,
       SUM(victories) AS sum_victories,
       AVG(victories) AS avg_victories,
       MIN(victories) AS min_victories,
       MAX(victories) AS max_victories
FROM drivers
GROUP BY nationality;

-- COUNT(DISTINCT ) computes the number of unique rows
-- "AS" is the alias or name of the statistic
SELECT COUNT(DISTINCT party_name) AS num_distinct_parties,
       COUNT(*) AS num_members       
FROM members.us_congress_members
-- SQLBook: Markup
<font size = "5">

(e) Groupby + Aggregate + Sort

- Compute an aggregate statistict using ```GROUP BY```
- Then sort using ``` ORDER BY ```

HINT: See the end of lectures 16 and 17
-- SQLBook: Code
-- Computing the total number of victories by nationality and sorting the results in descending order of total victories:
SELECT nationality,
       SUM(victories) AS total_victories
FROM drivers
GROUP BY nationality
ORDER BY total_victories DESC;
-- SQLBook: Markup
<font size = "5">

(f) Groupby + Aggregate + Subset

- Compute an aggregate statistict using ```GROUP BY```
- Subset one of the above datasets using ``` HAVING ```
-- SQLBook: Code
-- Selecting nationalities with a sum of victories greater than 50 and grouping the results:
SELECT nationality,
       SUM(victories) AS sum_victories,
       AVG(victories) AS avg_victories,
       MIN(victories) AS min_victories,
       MAX(victories) AS max_victories
FROM drivers
GROUP BY nationality
HAVING SUM(victories) > 50;